<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>se.claremont</groupId>
    <artifactId>TestAutomationFramework</artifactId>
    <version>v2.2.7-beta17</version>
    <packaging>pom</packaging>

    <name>TAF - Test Automation Framework</name>
    <description>TAF - Test Automation Framework</description>
    <url>http://www.claremont.se</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <TEST_SERVER>46.101.193.212</TEST_SERVER>
        <TEST_SERVER_DEPLOY_PATH>/home/taf</TEST_SERVER_DEPLOY_PATH>
        <TEST_USER>taf</TEST_USER>
        <TEST_USER_PASSWORD>Claremont16!</TEST_USER_PASSWORD>
    </properties>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <dependencies>

        <!-- Log4j is used for more primitive, but easily applied logging in the framework. -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.21</version>
        </dependency>

        <!-- JUnit is used as a test runner for both unit tests and for test execution from command line from built artifact. -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.mockito/mockito-all -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.9.5</version>
        </dependency>

        <!-- SSH support is included for scripting purposes. -->
        <dependency>
            <groupId>sshtools</groupId>
            <artifactId>j2ssh-daemon</artifactId>
            <version>0.2.9</version>
        </dependency>
        <dependency>
            <groupId>sshtools</groupId>
            <artifactId>j2ssh-core</artifactId>
            <version>0.2.2</version>
        </dependency>
        <dependency>
            <groupId>sshtools</groupId>
            <artifactId>j2ssh-common</artifactId>
            <version>0.2.9</version>
        </dependency>


        <!-- OkHTTP3 is used for REST calls. -->
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>3.4.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>mockwebserver</artifactId>
            <version>3.4.1</version>
        </dependency>

        <!-- JNA is used for ClassLoading purposes for Java based execution. -->
        <dependency>
            <groupId>net.java.dev.jna</groupId>
            <artifactId>jna</artifactId>
            <version>4.2.2</version>
        </dependency>

        <!-- Fest is used to get Java based testing going, as a compliment to the AWT Robot libraries. -->
        <dependency>
            <groupId>org.easytesting</groupId>
            <artifactId>fest-swing</artifactId>
            <version>1.2.1</version>
        </dependency>

        <!-- Selenium is used as a driver for web based testing. -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-api</artifactId>
            <version>3.0.0-beta4</version>
        </dependency>

        <!-- JSON is used to interprete JSON strings - mainly in REST testing. -->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20160810</version>
        </dependency>

        <!-- JCIFS libraries are included for support for Linux-based file systems as well as Windows based ones. -->
        <dependency>
            <groupId>jcifs</groupId>
            <artifactId>jcifs</artifactId>
            <version>1.3.17</version>
        </dependency>
        <dependency>
            <groupId>org.subethamail</groupId>
            <artifactId>subethasmtp</artifactId>
            <version>3.1.7</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-test</artifactId>
            <version>1.4.2.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.apache.struts</groupId>
            <artifactId>struts-core</artifactId>
            <version>1.3.8</version>
        </dependency>

    </dependencies>

    <repositories>
        <repository>
            <id>central</id>
            <name>Maven Central</name>
            <url>http://repo1.maven.org/maven2/</url>
        </repository>
        <repository>
            <id>apachew.org</id>
            <name>Apache-SVN</name>
            <url>https://svn.apache.org/viewvc/maven</url>
        </repository>
        <repository>
            <id>mvnrepository.com</id>
            <name>MVNRepository</name>
            <url>https://mvnrepository.com</url>
        </repository>
        <repository>
            <id>claremontqualitymanagement</id>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
                <checksumPolicy>fail</checksumPolicy>
            </releases>
            <snapshots>
                <enabled>false</enabled>
                <updatePolicy>always</updatePolicy>
                <checksumPolicy>warn</checksumPolicy>
            </snapshots>
            <url>https://github.com/claremontqualitymanagement/TestAutomationFramework</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>central</id>
            <name>Maven Central</name>
            <url>http://repo1.maven.org/maven2</url>
        </pluginRepository>
        <pluginRepository>
            <id>mvnrepo</id>
            <name>MVNrepository</name>
            <url>http://mvnrepository.com</url>
        </pluginRepository>
        <pluginRepository>
            <id>github</id>
            <name>github</name>
            <url>https://github.com/</url>
        </pluginRepository>
    </pluginRepositories>

    <build>
        <!-- Compiler plugin makes class files from java files -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.4</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <!-- Assembly plugin is attempted to be used to create a single jar with all dependencies -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                            <addClasspath>true</addClasspath>
                            <mainClass>se.claremont.autotest.common.testrun.CliTestRunner</mainClass>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Surefire is used to execute tests within modules -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.19.1</version>
                <configuration>
                    <properties>
                        <property>
                            <name>listener</name>
                            <value>TafRunListener</value>
                        </property>
                    </properties>
                </configuration>
            </plugin>

            <!-- AntRun plugin is used to push artifact to build server. -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <configuration>
                    <tasks>
                        <!--
                        <scp todir="${TEST_USER}:${TEST_USER_PASSWORD}@${TEST_SERVER}:/${TEST_SERVER_DEPLOY_PATH}"
                             trust="true" failonerror="false">
                            <fileset
                                    file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"/>
                        </scp>
                        -->
                        <!-- upload latest documentation -->
                        <echo>UPLOADING...</echo>
                        <scp todir="${TEST_USER}:${TEST_USER_PASSWORD}@${TEST_SERVER}:/${TEST_SERVER_DEPLOY_PATH}/TAF/documentation/"
                             trust="true" failonerror="false">
                            <fileset
                                    file="${project.basedir}/documentation/*"/>
                        </scp>
                    </tasks>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>ant</groupId>
                        <artifactId>ant-jsch</artifactId>
                        <version>1.6.5</version>
                    </dependency>
                    <dependency>
                        <groupId>com.jcraft</groupId>
                        <artifactId>jsch</artifactId>
                        <version>0.1.53</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
</project>